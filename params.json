{"name":"Pam 2fa","tagline":"Two Factor authentication for Portable OpenSSH","body":"## Using 2 factor authentication with OpenSSH\r\n\r\nSince OpenSSH can delegate the authentication to PAM, it's _easy_ to extend a password-based authentication to a full 2 factor authentication. Since OpenSSH 6.2, it is also possible to check for a second factor after another method, for example using SSH keys, using ```AuthenticationMethods```.\r\n\r\nHowever, we want more, we want our users to be able to use any of their authentication methods (password, SSH keys, Kerberos, ...) and propose them a second factor authentication afterwards. But let's start step by step from the basis and build our solution\r\n\r\n### The basis: 2 factor authentication with pam\r\n\r\nPAM is by design modulable. It's possible to build your own module, compile it and by simply adding it to the right folder, PAM will be able to use it (after some configuration). You can find some existing module online or build your own based on them, for example:\r\n- https://github.com/Yubico/yubico-pam\r\n- https://github.com/duosecurity/duo_unix\r\n- https://github.com/CERN-CERT/pam_2fa\r\n\r\nThe PAM configurations is always found in the ```/etc/pam``` folder, and for sshd, this is ```/etc/pam.d/sshd```. This configuration file obeys a very simple format, defined in its [documentation](http://www.linux-pam.org/Linux-PAM-html/sag-configuration-file.html). For most systems, ```/etc/pam.d/sshd``` will only contain an ```include``` control definition for the ```auth``` service like this one:\r\n```\r\nauth       include      password-auth\r\n```\r\n\r\nWe need two changes in this configuration:\r\n- Replacing the ```include``` by an ```substack```. This will only change the way success and errors are handled. Instead of immediately stop and succeed/fail, PAM will continue through. This allows us to include another ```required``` rule without being worried by a ```sufficient``` rule to stop the authentication beforehand.\r\n- Add a new ```required``` rule which will load our new second factor module, with, if required, its configuration.\r\n\r\nFor CERN, this results in the following configuration:\r\n```\r\nauth       substack     password-auth\r\nauth       required     pam_2fa.so    [CERN-specific configuration]\r\n```\r\n\r\nAnd Voila, we have successfully configured PAM to use 2 factor authentication for sshd. Now we only need to configure sshd to use PAM via the following configuration:\r\n```\r\nUsePAM yes # That's easy!\r\nChallengeResponseAuthentication yes # To allow the client to discuss with the remote PAM\r\n\r\nRSAAuthentication no # We can't support any non-pam authentication\r\nPubkeyAuthentication no # We can't support any non-pam authentication\r\nPasswordAuthentication no # No basic password authentication\r\nKerberosAuthentication no # We can't support any non-pam authentication\r\n```\r\n\r\nJust restarting our sshd service and we're done, we've protected our servers with 2 factor authentication! But this was only the beginning: we need to support Kerberos, not passwords.\r\n\r\n### AuthenticationMethods: supporting Kerberos\r\n\r\nIn OpenSSH 6.2, a new parameter was included: ```AuthenticationMethods```. This new feature allows to define chains of authentication methods that are required. The design is relatively simple: the server exposes a list of method the client can use, the client pick one and use it, the servers then replies \"good, now pick another one in this list\", rinse&repeat until satisfied.\r\n\r\nSo we want to use Kerberos. Looking at the documentation, the corresponding method is ```gssapi-with-mic```. Now, our second factor is using PAM, so we still need the corresponding method, ```keyboard-interactive:pam```. We just have to chain the two, re-enable the corresponding authentication and here is our configuration:\r\n```\r\nUsePAM yes # That's easy!\r\nChallengeResponseAuthentication yes # To allow the client to discuss with the remote PAM\r\nKerberosAuthentication yes # We support it!\r\n\r\nAuthenticationMethods gssapi-with-mic,keyboard-interactive:pam\r\n\r\nRSAAuthentication no # We don't support it\r\nPubkeyAuthentication no # We don't support it\r\nPasswordAuthentication no # No basic password authentication\r\n```\r\n\r\nWe still have a small problem as we didn't change our PAM configuration: our users will be asked to type their password. We just need to remove the password authentication and simply keep our second factor module in PAM:\r\n```\r\nauth       required     pam_2fa.so    [CERN-specific configuration]\r\n```\r\n\r\nRestarting sshd, and done!\r\n\r\n### AuthenticationMethods: adding SSH keys support\r\n\r\nOn top of Kerberos, we also want to support SSH keys. Looking at OpenSSH naming convention, the method for it is ```publickey```. We just need to enable it and chain it to ```keyboard-interactive:pam``` and add it to the list of supported methods in our configuration:\r\n```\r\nUsePAM yes # That's easy!\r\nChallengeResponseAuthentication yes # To allow the client to discuss with the remote PAM\r\nKerberosAuthentication yes # We support it!\r\nPubkeyAuthentication yes # We support it!\r\n\r\nAuthenticationMethods gssapi-with-mic,keyboard-interactive:pam publickey,keyboard-interactive:pam\r\n\r\nRSAAuthentication no # We don't support it\r\nPasswordAuthentication no # No basic password authentication\r\n```\r\n\r\n### AuthenticationMethods: adding PAM support ?\r\n\r\nAnd now we are back to the beginning, supporting password-based authentication, but this time in addition to the other methods. Password-based authentication is using ```keyboard-interactive:pam```, so if we were to follow the previous logic, we would use ```keyboard-interactive:pam,keyboard-interactive:pam```. However, if we do so, we still only have one single PAM configuration in which we can:\r\n- Ask for the second factor only: the normal password will never be asked, at most we can get the second factor twice...\r\n- Ast for the password only: the second factor will never be asked, the password will be asked instead, even after kerberos and ssh key authentication\r\n- Ask for both: this make password-authentication work (given that we only put ```keyboard-interactive``` once), but break Kerberos and ssh key authentication as the password will also be asked...\r\n\r\nThere is no such thing as ```keyboard-interactive:pam:sshdpassword``` or ```keyboard-interactive:pam:2fa```. There is only one configuration which is always called in the same environment. In the end, PAM can't differentiate the two cases we have: calling PAM after a successful authentication for the second factor or calling PAM for doing the whole authentication...\r\n\r\n### Exposing more information to PAM\r\n\r\nIn the end we have no choice but to patch OpenSSH to expose more information to PAM, allowing it to make the right decision. The patch is available on the [OpenSSH bug tracker](https://bugzilla.mindrot.org/show_bug.cgi?id=2408) and [our Github](https://github.com/CERN-CERT/openssh-portable). We are also hosting it on here two versions that can be directly applied on RedHat sources:\r\n- The [full version](openssh-6.6.1p1-expose-successful-auth-methods.patch) ([atomic patches](full/)), taken from the OpenSSH bugtracker and GitHub and adapted to sources from RedHat 7\r\n- A [simplified version](openssh-6.6.1p1-expose-successful-auth-methods.simplified.patch) ([atomic patches](simplified/)): patching OpenSSH is always a risk, so we are simplifying the patch to make sure we understand it and keep it safe...\r\n\r\nThis patch adds a new environment variable, SSH_USER_AUTH, which is exposed:\r\n- During the authentication via the PAM environment. It contains the list of successful authentications methods so far.\r\n- After the authentication, when a new shell is spawn, via the shell environment. It contains the list of authentications methods successfully used to login into the server.\r\n\r\nWhile the simplified version of the patch contains only a comma-separated list of these methods and sub-methods, the full version also includes:\r\n- The public key fingerprint for key-based authentications\r\n- The host public key fingerprint for host-based authentications\r\n\r\nWe hope that one day, we will also be able to include more details about other methods, like for example the principal used for Kerberos authentication, but these would require more complex patches\r\n\r\nWe hope that one day these patches will be integrated upstream, but for now, we need to maintain our own compiled version for CERN (links only accessible withing CERN):\r\n- [Compiled patched versions of OpenSSH for CERN Centos 7](http://linuxsoft.cern.ch/internal/repos/sec7-qa/x86_64/os/Packages/) with its [sources](http://linuxsoft.cern.ch/internal/repos/sec7-qa/source/SRPMS/openssh-6.6.1p1-22.el7.centos.src.rpm)\r\n- [Compiled patched versions of OpenSSH for Scientific Linux CERN 6](http://koji.cern.ch/koji/taskinfo?taskID=433853) with its [sources](https://koji.cern.ch/kojifiles/work/tasks/3854/433854/openssh-6.6.1p1-22.el6.src.rpm)\r\n\r\n### Using a smart PAM configuration\r\n\r\nWith this patched version of OpenSSH, it is now possible to make decisions based on this environment variable.\r\nUsing this variable is safe as it is only controlled by:\r\n- sshd, that refreshes its value before any pam authentication call\r\n- pam modules themselves during a single call, as they can modify the environment\r\n\r\nAs we are using the simplified version of the patch, let's start with a simple check: the existence of a non-empty SSH_USER_AUTH variable in the PAM environment. A straightforward version of such a module is available on our [GitHub](https://github.com/CERN-CERT/pam_2fa/blob/master/pam_ssh_user_auth.c). This module will basically return two values: *PAM_SUCCESS* if there was any previously successful authentications and *PAM_IGNORE* if there was none. Based on this, we can write the following PAM configuration:\r\n```\r\nauth       [success=1 ignore=ignore default=die] pam_ssh_user_auth.so\r\nauth       substack     password-auth\r\nauth       required     pam_2fa.so    [CERN-specific configuration]\r\n```\r\n\r\nThis configuration is simple, but not trivial to read, as the format is not simple, especially on the first line. This first line means that pam will call pam_ssh_user_auth.so and will:\r\n- on PAM_SUCCESS (i.e. if there was *any* previous successful sshd authentication) skip the next line which contains the password authentication\r\n- on PAM_IGNORE (i.e. if there was *no* previous successful sshd authentication) ignore the result and simply continue\r\n- on any other value (bug?) just die\r\n\r\nWe can ensure the behavior we want, that is running the 2nd factor after any first factor, by configuring SSHD in the following manner:\r\n```\r\nUsePAM yes # That's easy!\r\nChallengeResponseAuthentication yes # To allow the client to discuss with the remote PAM\r\nKerberosAuthentication yes # We support it!\r\nPubkeyAuthentication yes # We support it!\r\n\r\nAuthenticationMethods gssapi-with-mic,keyboard-interactive:pam publickey,keyboard-interactive:pam keyboard-interactive:pam\r\n\r\nRSAAuthentication no # We don't support it\r\nPasswordAuthentication no # No basic password authentication\r\n```\r\n\r\n### Protecting the second factor\r\n\r\nAt CERN, we have another requirement: the second factor should never be asked is there was no first factor. This is due to the fact that one of the second factor we are using is based on SMS and we don't want malicious attackers to spam our users with SMS...\r\n\r\nDue to this constrain, we need a more complicated PAM configuration, which I won't explain here (consider it an exercise for the reader):\r\n```\r\nauth       [success=2 ignore=ignore default=die] pam_ssh_user_auth.so\r\nauth       substack     password-auth\r\nauth       [default=1]  pam_deny.so\r\nauth       required     pam_2fa.so    [CERN-specific configuration]\r\n```\r\n\r\nThis new configuration will result in a single pam call resulting in:\r\n- Password authentication (only) if there was no previous successful sshd authentication\r\n- Second factor authentication (only) if there was any previous successful sshd authentication\r\nAs a result, we need to require two successful ```keyboard-interactive:pam``` by themselves and not only one:\r\n\r\n```\r\nUsePAM yes # That's easy!\r\nChallengeResponseAuthentication yes # To allow the client to discuss with the remote PAM\r\nKerberosAuthentication yes # We support it!\r\nPubkeyAuthentication yes # We support it!\r\n\r\nAuthenticationMethods gssapi-with-mic,keyboard-interactive:pam publickey,keyboard-interactive:pam keyboard-interactive:pam,keyboard-interactive:pam\r\n\r\nRSAAuthentication no # We don't support it\r\nPasswordAuthentication no # No basic password authentication\r\n```\r\n\r\n### Acknowledgements\r\n\r\nWe would like to thanks:\r\n- György Demarcsek for his initial [idea](http://marc.info/?l=openssh-unix-dev&m=143325381725555&w=2) and [patch](https://bugzilla.mindrot.org/show_bug.cgi?id=2408)\r\n- Damien Miller for his [name and format suggestions](http://marc.info/?l=openssh-unix-dev&m=143328980804529&w=2)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}