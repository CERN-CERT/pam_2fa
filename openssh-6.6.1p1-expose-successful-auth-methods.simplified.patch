diff --git a/auth-pam.c b/auth-pam.c
index 690711e..fd8bde1 100644
--- a/auth-pam.c
+++ b/auth-pam.c
@@ -693,6 +693,10 @@ sshpam_init_ctx(Authctxt *authctxt)
 		return (NULL);
 	}
 
+	/* Notify PAM about any already successful auth methods */
+	if (authctxt->auth_details)
+		do_pam_putenv("SSH_USER_AUTH", authctxt->auth_details);
+
 	ctxt = xcalloc(1, sizeof *ctxt);
 
 	/* Start the authentication thread */
diff --git a/auth.h b/auth.h
index f9d191c..8cd7a96 100644
--- a/auth.h
+++ b/auth.h
@@ -78,6 +78,8 @@ struct Authctxt {
 #endif
 	Buffer		*loginmsg;
 	void		*methoddata;
+
+	char            *auth_details;
 };
 /*
  * Every authentication method has to handle authentication requests for
diff --git a/auth2.c b/auth2.c
index 436cd60..156c175 100644
--- a/auth2.c
+++ b/auth2.c
@@ -306,6 +306,7 @@ userauth_finish(Authctxt *authctxt, int authenticated, const char *method,
     const char *submethod)
 {
 	char *methods;
+	char *prev_auth_details;
 	int partial = 0;
 
 	if (!authctxt->valid && authenticated)
@@ -336,6 +337,14 @@ userauth_finish(Authctxt *authctxt, int authenticated, const char *method,
 	if (authctxt->postponed)
 		return;
 
+	if (authenticated || partial) {
+		prev_auth_details = authctxt->auth_details;
+		xasprintf(&authctxt->auth_details, "%s%s%s",
+		    prev_auth_details ? prev_auth_details : "",
+		    prev_auth_details ? ", " : "", method);
+		free(prev_auth_details);
+	}
+
 #ifdef USE_PAM
 	if (options.use_pam && authenticated) {
 		if (!PRIVSEP(do_pam_account())) {
diff --git a/monitor.c b/monitor.c
index 55575ed..660038e 100644
--- a/monitor.c
+++ b/monitor.c
@@ -383,6 +383,7 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
 {
 	struct mon_table *ent;
 	int authenticated = 0, partial = 0;
+	char *prev_auth_details;
 
 	debug3("preauth child monitor started");
 
@@ -420,6 +421,14 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
 		auth_submethod = NULL;
 		authenticated = (monitor_read(pmonitor, mon_dispatch, &ent) == 1);
 
+		if (authenticated) {
+			prev_auth_details = authctxt->auth_details;
+			xasprintf(&authctxt->auth_details, "%s%s%s",
+			    prev_auth_details ? prev_auth_details : "",
+			    prev_auth_details ? ", " : "", auth_method);
+			free(prev_auth_details);
+		}
+
 		/* Special handling for multiple required authentications */
 		if (options.num_auth_methods != 0) {
 			if (!compat20)
diff --git a/session.c b/session.c
index e2ab34f..2c90943 100644
--- a/session.c
+++ b/session.c
@@ -1365,6 +1365,10 @@ do_setup_env(Session *s, const char *shell)
 	}
 #endif /* USE_PAM */
 
+	if (s->authctxt->auth_details)
+		child_set_env(&env, &envsize, "SSH_USER_AUTH",
+		     s->authctxt->auth_details);
+
 	if (auth_sock_name != NULL)
 		child_set_env(&env, &envsize, SSH_AUTHSOCKET_ENV_NAME,
 		    auth_sock_name);
@@ -2843,6 +2847,9 @@ do_cleanup(Authctxt *authctxt)
 	if (authctxt == NULL)
 		return;
 
+	free(authctxt->auth_details);
+	authctxt->auth_details = NULL;
+
 #ifdef USE_PAM
 	if (options.use_pam) {
 		sshpam_cleanup();
diff --git a/ssh.1 b/ssh.1
index f65e42f..5083d1a 100644
--- a/ssh.1
+++ b/ssh.1
@@ -1284,6 +1284,9 @@ server IP address, and server port number.
 This variable contains the original command line if a forced command
 is executed.
 It can be used to extract the original arguments.
+.It Ev SSH_USER_AUTH
+This variable contains, for SSH2 only, a comma-separated list of authentication
+methods that were successfuly used to authenticate.
 .It Ev SSH_TTY
 This is set to the name of the tty (path to the device) associated
 with the current shell or command.
